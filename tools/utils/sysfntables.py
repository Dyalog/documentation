"""
This helps generate the tables 

https://dyalog.github.io/documentation/20.0/language-reference-guide/system-functions/system-functions-and-variables-colwise/
https://dyalog.github.io/documentation/20.0/language-reference-guide/system-functions/system-functions-and-variables-rowwise/

Open a Dyalog session and type

2031⌶7
2031⌶8

and capture the output to a file "sysfns.txt".

% python sysfntables.py [--row-wise] sysfns.txt > table.md

Note also the print-specific version of this table:

https://dyalog.github.io/documentation/20.0/language-reference-guide/system-functions/system-functions-and-variables-print/

It can be generated by running:

% python sysfntables.py --columns=5 --row-wise --no-links sysfns.txt > table.md

and place the contents of "table.md" into the relevant page.
"""
import argparse
import sys
import math

def is_valid_symbol(token):
    """
    Checks if the token begins with '⎕' and is immediately followed by one or more uppercase letters.
    """
    if token.startswith("⎕") and len(token) > 1:
        return all(ch.isupper() for ch in token[1:])
    return False

def format_cell(symbol, links=True):
    if not links:
        return f"`{symbol}`"
        
    if symbol == "⎕Á":
        return f"[`⎕Ⓐ`](underscored-alphabetic-characters.md)"

    symbol_name = symbol[1:].lower()
    return f"[`{symbol}`]({symbol_name}.md)"

def create_markdown_table(symbols, columns=10, row_wise=False, links=True):
    total_symbols = len(symbols)
    rows = math.ceil(total_symbols / columns)
    markdown_rows = []
    
    separator_row = "|"
    for _ in range(columns):
        separator_row += "---|"
    markdown_rows.append(separator_row)
    
    for row in range(rows):
        data_row = "|"
        for col in range(columns):
            if row_wise:
                index = row * columns + col
            else:
                index = col * rows + row
                
            if index < len(symbols):
                data_row += format_cell(symbols[index], links=links) + "|"
            else:
                data_row += "&nbsp;|"  # Empty cell with non-breaking space
        markdown_rows.append(data_row)
    
    markdown_table = "\n".join(markdown_rows)
    
    return markdown_table

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Extract APL system functions and create a markdown table.')
    parser.add_argument('filename', help='Input file to process')
    parser.add_argument('--row-wise', '-r', action='store_true', 
                        help='Generate table in row-wise order instead of column-wise')
    parser.add_argument('--columns', '-c', type=int, default=10,
                        help='Number of columns in the output table (default: 10)')
    parser.add_argument('--no-links', '-n', action='store_false', dest='links',
                        help='Display symbols without markdown links, just as back-ticked text')
    
    args = parser.parse_args()
    
    with open(args.filename, 'r') as file:
        text = file.read()
    
    tokens = text.split()
    
    symbols = [token for token in tokens if is_valid_symbol(token)]
    
    symbols_sorted = sorted(set(symbols))
    
    print("\nExtracted sysfns in alphabetical order:", file=sys.stderr)
    for symbol in symbols_sorted:
        print(symbol, file=sys.stderr)
    
    markdown_table = create_markdown_table(symbols_sorted, columns=args.columns, row_wise=args.row_wise, links=args.links)
    print(markdown_table)
